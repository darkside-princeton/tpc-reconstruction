# DAQ parameters
int num_chans      4   # number of channels
vector int ch_ids ( 0 1 2 3 ) # channels to process (must be same length as num_chans)
vector int ch_pos ( 1 1 1 1 ) # 1 if channel is on top, 0 if channel is on bottom (position in vector corresponds to channel id)
int num_samps        2048     # number of samples per waveform
double sampling_rate 0.25  # samp/ns
string polarity neg  #pos/neg


# Noise Characterization
int max_threshold 8  # multiple of baseline stdev
double step_size_threshold  0.2
int max_time  50 # samples
double step_size_time 1
int baseline_samps 100 # number of samples used in baseline rolling avg
string constant_baseline y

# PULSE AVERAGING:
# SPE cuts (cuts on pulse characteristics to select only SPE pulses)
double min_SPE_charge 75
double max_SPE_charge 350
double min_SPE_height 5
double max_SPE_height 13
double min_SPE_length 0
double max_SPE_length 10 
string avgPulse_file /darkside/users/jbhall/waveTPC/Inputs/sipm_calibration.root   # name of file containing average pulse shape -- this will need to change
string avgPulse_name gAvgPulse_ch0;2 # name of graph containing average SPE pulse shape -- this will need to change
int pulse_avg_buf 25 # Number of samples before pulse start to begin averaging
int pulse_avg_samps 75 # Number of samples after pulse start used to average pulse

# Pulse-finding
double pulse_threshold 8 # multiple of baseline stdev
int pulse_end_size 100 # number of samples used to determine end of pulse
int pulse_width 10 # minimum number of sample to qualify as a pulse
int derivative_offset 5 #offset used to calculate derivative in samples 

#Filtering
double cutoff_freq_low 100 #cutoff frequency for LP filter in MHz
double cutoff_freq_high 3 #cutoff frequency for HP filter in MHz

#Deconvolution
string deconvolve n # y/n Apply Deconvolution?  
double fft_filter_freq 45 # cutoff frequency for fft filter in MHz
string calc_avg_pulse n # if y, calculates average pulse from data to use as response function; if n, uses average pulse from file
int avg_channel 1 # ID of channel used to calculate average pulse used for response function
int avg_frequency 100 # frequency with which avg response function is recalculated and used as input to deconvolved waveform (must be a factor of nevents)

string noise_samp_file /darkside/users/jbhall/waveTPC/Inputs/NoiseSample.root #name of file with noise sample for Wiener Deconvolution
string noise_samp_name Graph #name of TGraph containing noise sample

#Cluster-finding
string gain_runID 011111
int cluster_width 100  # minimum number of samples to qualify as a cluster
int double_cluster_width 100 # minimum samples to qualify as  overlapping cluster
double cluster_threshold 5 # multiple of baseline stdev
double double_cluster_threshold 500 # threshold to qualify as overlapping cluster
int cluster_end_size 500 
double S1_S2_threshold 0.15
int S1_avg_buf 50
int S1_avg_samps 1750

#Fprompt ( 0.09 0.135 0.180 0.225 0.270 0.315 )
vector double prompt_windows ( 0.1 0.2 0.4 0.6 0.8 1.0 1.2 1.4 )
vector double late_windows ( 7 7 7 7 7 7 )

#Output
string output_file output/laser_test.root

# Generate events
string recoil ER # electron recoil (ER)/ nuclear recoil (NR)
int num_S2 1 # number of S2 pulses to generate
vector double energy ( 50 ) # energy of each scatter event in keV (must be the same length as num_S2)
double work 19.5 #in eV
string s2_amp_file Inputs/S2AmpMeanGraph.root  # file containing mean S2 amplification factor
string s2_amp_name Side1 # name of TGraph containing mean S2 amplification factor
double drift_velocity 1 #in mm/us
double s1_detection_eff 0.3 # chosen using binomial distribution 
int waveform_length 100 # size of waveform in us
int generate_events 50 # number of events to generate
int generate_channels 8 # number of channels to generate
double max_dz 7 # maximum z pos in cm
double max_radius 25 # maximum radius in mm
string generate_output_dir /home/eberzin/rand_data_finaltest  # directory where wave_.dat files will be located
int source_channel 1 # channel in real data from which pulses are randomly selected
string use_templates n # use average pulse template to construct waveforms (default uses real pulses from data)
string uniform_channels y # if n, randomly chooses probabilities for dividing pulses among channels


#Plotting/Printing
string print_pulses y

string plot_pulses y #y/n (vertical blue lines)
string plot_baseline y #y/n (green)
string plot_LP_filter y #y/n (cyan)
string plot_FFT_filter n #y/n (purple)
string plot_HP_filter n #y/n (orange, dark green, light purple)
string plot_derivative y #y/n (magenta)
string plot_integral y #y/n (red)
string plot_deconv n #y/n (orange)


string plot_cluster_times y 
string plot_cluster_pulses y
string plot_sum_wf y